{"title":"C与内存管理","slug":"内存管理","date":"2020-07-16T14:08:36.792Z","updated":"2020-07-20T03:42:35.607Z","comments":true,"path":"api/articles/内存管理.json","excerpt":"在任何程序设计环境和语言中，内存管理都十分重要。这本文章基于C语言的基础上讲解内存管理。","covers":null,"content":"<p>在任何程序设计环境和语言中，内存管理都十分重要。这本文章基于C语言的基础上讲解内存管理。<a id=\"more\"></a><br>这些是在学习和看别人优秀博客总结的知识点，由于个人水平有限，所以可能不够具体不够深入，见谅！</p>\n<h2 id=\"为什么需要分配内存\"><a href=\"#为什么需要分配内存\" class=\"headerlink\" title=\"为什么需要分配内存\"></a>为什么需要分配内存</h2><ul>\n<li><p>一个进程在运行过程中，代码是根据流程依次执行的，只需要访问一次，当然跳转和递归有可能使代码执行多次，而数据一般都需要访问多次，因此单独开辟空间以方便访问和节约空间。</p>\n</li>\n<li><p>临时数据及需要再次使用的代码在运行时放入栈区中，生命周期短。</p>\n</li>\n<li><p>全局数据和静态数据有可能在整个程序执行过程中都需要访问，因此单独存储管理。</p>\n</li>\n<li><p>堆区由用户自由分配，以便管理。</p>\n</li>\n</ul>\n<p>C语言为内存分配和管理提供了几个函数，这些函数都可以在头文件&lt;stdlib.h&gt;中找到。</p>\n<ul>\n<li><strong>void *malloc(int num)</strong><br>在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。</li>\n<li><strong>void *realloc(void *address, int newsize)</strong><br>该函数重新分配内存，把内存扩展到 newsize。</li>\n<li><strong>void *calloc(int num, int size)</strong><br>在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。</li>\n<li><strong>void free(void *address)</strong><br>该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。</li>\n</ul>\n<h2 id=\"内存分配方式\"><a href=\"#内存分配方式\" class=\"headerlink\" title=\"内存分配方式\"></a>内存分配方式</h2><p>在C语言中，对象可以使用静态或动态的方式分配内存空间。<br>静态分配：编译器在处理程序源代码时分配。<br>动态分配：程序在执行时调用malloc库函数申请分配。<br>静态内存分配是在程序执行之前进行的因而效率比较高，而动态内存分配则可以灵活的处理未知数目的。</p>\n<p><strong>静态与动态内存分配的主要区别如下：</strong></p>\n<p>静态对象是有名字的变量，可以直接对其进行操作；动态对象是没有名字的一段地址，需要通过指针间接地对它进行操作。<br>静态对象的分配与释放由编译器自动处理；动态对象的分配与释放必须由程序员显式地管理，它通过malloc()和free两个函数来完成。</p>\n<h3 id=\"静态分配\"><a href=\"#静态分配\" class=\"headerlink\" title=\"静态分配\"></a>静态分配</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态分配\"><a href=\"#动态分配\" class=\"headerlink\" title=\"动态分配\"></a>动态分配</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1 = (<span class=\"keyword\">char</span> *）<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">char</span> name[<span class=\"number\">100</span>];</span><br><span class=\"line\">   <span class=\"keyword\">char</span> *description;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">strcpy</span>(name, <span class=\"string\">\"Zara Ali\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/* 动态分配内存 */</span></span><br><span class=\"line\">   description = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>( <span class=\"number\">30</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) );</span><br><span class=\"line\">   <span class=\"keyword\">if</span>( description == <span class=\"literal\">NULL</span> )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Error - unable to allocate required memory\\n\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">strcpy</span>( description, <span class=\"string\">\"Zara ali a DPS student.\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 假设您想要存储更大的描述信息 */</span></span><br><span class=\"line\">   description = (<span class=\"keyword\">char</span> *) <span class=\"built_in\">realloc</span>( description, <span class=\"number\">100</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) );</span><br><span class=\"line\">   <span class=\"keyword\">if</span>( description == <span class=\"literal\">NULL</span> )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Error - unable to allocate required memory\\n\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">strcat</span>( description, <span class=\"string\">\"She is in class 10th\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name = %s\\n\"</span>, name );</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Description: %s\\n\"</span>, description );</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/* 使用 free() 函数释放内存 */</span></span><br><span class=\"line\">   <span class=\"built_in\">free</span>(description);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<blockquote>\n<p>Name = Zara Ali<br>Description: Zara ali a DPS student.She is in class 10th</p>\n</blockquote>\n","more":"<br>这些是在学习和看别人优秀博客总结的知识点，由于个人水平有限，所以可能不够具体不够深入，见谅！</p>\n<h2 id=\"为什么需要分配内存\"><a href=\"#为什么需要分配内存\" class=\"headerlink\" title=\"为什么需要分配内存\"></a>为什么需要分配内存</h2><ul>\n<li><p>一个进程在运行过程中，代码是根据流程依次执行的，只需要访问一次，当然跳转和递归有可能使代码执行多次，而数据一般都需要访问多次，因此单独开辟空间以方便访问和节约空间。</p>\n</li>\n<li><p>临时数据及需要再次使用的代码在运行时放入栈区中，生命周期短。</p>\n</li>\n<li><p>全局数据和静态数据有可能在整个程序执行过程中都需要访问，因此单独存储管理。</p>\n</li>\n<li><p>堆区由用户自由分配，以便管理。</p>\n</li>\n</ul>\n<p>C语言为内存分配和管理提供了几个函数，这些函数都可以在头文件&lt;stdlib.h&gt;中找到。</p>\n<ul>\n<li><strong>void *malloc(int num)</strong><br>在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。</li>\n<li><strong>void *realloc(void *address, int newsize)</strong><br>该函数重新分配内存，把内存扩展到 newsize。</li>\n<li><strong>void *calloc(int num, int size)</strong><br>在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。</li>\n<li><strong>void free(void *address)</strong><br>该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。</li>\n</ul>\n<h2 id=\"内存分配方式\"><a href=\"#内存分配方式\" class=\"headerlink\" title=\"内存分配方式\"></a>内存分配方式</h2><p>在C语言中，对象可以使用静态或动态的方式分配内存空间。<br>静态分配：编译器在处理程序源代码时分配。<br>动态分配：程序在执行时调用malloc库函数申请分配。<br>静态内存分配是在程序执行之前进行的因而效率比较高，而动态内存分配则可以灵活的处理未知数目的。</p>\n<p><strong>静态与动态内存分配的主要区别如下：</strong></p>\n<p>静态对象是有名字的变量，可以直接对其进行操作；动态对象是没有名字的一段地址，需要通过指针间接地对它进行操作。<br>静态对象的分配与释放由编译器自动处理；动态对象的分配与释放必须由程序员显式地管理，它通过malloc()和free两个函数来完成。</p>\n<h3 id=\"静态分配\"><a href=\"#静态分配\" class=\"headerlink\" title=\"静态分配\"></a>静态分配</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态分配\"><a href=\"#动态分配\" class=\"headerlink\" title=\"动态分配\"></a>动态分配</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1 = (<span class=\"keyword\">char</span> *）<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">char</span> name[<span class=\"number\">100</span>];</span><br><span class=\"line\">   <span class=\"keyword\">char</span> *description;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">strcpy</span>(name, <span class=\"string\">\"Zara Ali\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/* 动态分配内存 */</span></span><br><span class=\"line\">   description = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>( <span class=\"number\">30</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) );</span><br><span class=\"line\">   <span class=\"keyword\">if</span>( description == <span class=\"literal\">NULL</span> )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Error - unable to allocate required memory\\n\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">strcpy</span>( description, <span class=\"string\">\"Zara ali a DPS student.\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 假设您想要存储更大的描述信息 */</span></span><br><span class=\"line\">   description = (<span class=\"keyword\">char</span> *) <span class=\"built_in\">realloc</span>( description, <span class=\"number\">100</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) );</span><br><span class=\"line\">   <span class=\"keyword\">if</span>( description == <span class=\"literal\">NULL</span> )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Error - unable to allocate required memory\\n\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">strcat</span>( description, <span class=\"string\">\"She is in class 10th\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name = %s\\n\"</span>, name );</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Description: %s\\n\"</span>, description );</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/* 使用 free() 函数释放内存 */</span></span><br><span class=\"line\">   <span class=\"built_in\">free</span>(description);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<blockquote>\n<p>Name = Zara Ali<br>Description: Zara ali a DPS student.She is in class 10th</p>\n</blockquote>","categories":[],"tags":[{"name":"c/c++","path":"api/tags/c/c++.json"},{"name":"内存管理","path":"api/tags/内存管理.json"}]}