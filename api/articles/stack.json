{"title":"栈及其操作","slug":"stack","date":"2021-03-13T02:25:47.614Z","updated":"2021-03-13T02:34:49.380Z","comments":true,"path":"api/articles/stack.json","excerpt":"栈特点根据存储结构不同分为顺序栈与链栈, 顺序栈：顺序存储； 链栈：链式存储是限定在表尾进行插入和删除的线性表表尾端为栈顶，表头端为栈底修改遵循后进先出 ","covers":null,"content":"<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>根据存储结构不同分为顺序栈与链栈, 顺序栈：<strong>顺序存储</strong>； 链栈：<strong>链式存储</strong></li>\n<li>是限定在表尾进行插入和删除的线性表</li>\n<li>表尾端为栈顶，表头端为栈底</li>\n<li>修改遵循后进先出 </li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"I-分类–顺序栈\"><a href=\"#I-分类–顺序栈\" class=\"headerlink\" title=\"I. 分类–顺序栈\"></a>I. 分类–顺序栈</h3><h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><p>(插入图片)</p>\n<h5 id=\"1-存储结构\"><a href=\"#1-存储结构\" class=\"headerlink\" title=\"1.存储结构\"></a>1.存储结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MAXSIZE 100</span><br><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">    SElemType *base; &#x2F;&#x2F;栈底指针，指向栈底元素</span><br><span class=\"line\">    SElemType *top;  &#x2F;&#x2F;栈顶指针</span><br><span class=\"line\">    int stacksize;   &#x2F;&#x2F;栈可用的最大容量</span><br><span class=\"line\">&#125;SqStack;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h5><p>步骤：<br><br>a. 为顺序栈分配一个最大容量<strong>MAXZISE</strong>的数组空间 <br><br>b. 栈顶指针<strong>top</strong>初始化为栈底指针<strong>base</strong>，表示空栈 <br><br>c. stacksize设为栈的最大容量<strong>MAXSIZE</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status InitStack(SqStack &amp;S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    S.base &#x3D; new SElemType[MAXSIZE]; &#x2F;&#x2F;动态分配最大容量为MAXSIZE的数组</span><br><span class=\"line\">    if(!S.base) exit(EOVERFLOW);</span><br><span class=\"line\">    S.top &#x3D; S.base; &#x2F;&#x2F;空栈</span><br><span class=\"line\">    S.stacksize &#x3D; MAXSIZE;;</span><br><span class=\"line\">    return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-入栈\"><a href=\"#3-入栈\" class=\"headerlink\" title=\"3.入栈\"></a>3.入栈</h5><p>步骤：<br><br>a. 判断栈容量是否已满 <br><br>b. 将插入的元素压入栈顶，栈顶指针加1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status Push(SqStack &amp;S, SElemType e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(S.top-S.base&#x3D;&#x3D;S.stacksize)</span><br><span class=\"line\">        return ERROR;</span><br><span class=\"line\">    &#x2F;&#x2F; *S.top++ &#x3D; e;</span><br><span class=\"line\">    *S.top &#x3D; e;</span><br><span class=\"line\">    S.top++;</span><br><span class=\"line\">   return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-出栈\"><a href=\"#4-出栈\" class=\"headerlink\" title=\"4.出栈\"></a>4.出栈</h5><p>步骤: <br><br>a. 判断栈是否为空 <br><br>b. 先将栈顶指针减1，再将要出栈的元素赋给栈顶指针所指的值,栈顶元素出栈 <br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status Pop(SqStack &amp;S, SElemType &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(S.top&#x3D;&#x3D;S.base)</span><br><span class=\"line\">        return ERROR;</span><br><span class=\"line\">    S.top--;</span><br><span class=\"line\">    e &#x3D; *S.top;</span><br><span class=\"line\">    &#x2F;&#x2F;e &#x3D; *--S.top;</span><br><span class=\"line\">    return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-取栈顶元素\"><a href=\"#5-取栈顶元素\" class=\"headerlink\" title=\"5.取栈顶元素\"></a>5.取栈顶元素</h5><p>步骤：<br><br>a. 若非空，返回栈顶指针的值，<strong>栈顶指针保持不变</strong> <br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status GetTop(SqStack &amp;S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(S.top!&#x3D;S.base)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return *(S.top-1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-完整实现（java）\"><a href=\"#6-完整实现（java）\" class=\"headerlink\" title=\"6.完整实现（java）\"></a>6.完整实现（java）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"II-分类–链栈\"><a href=\"#II-分类–链栈\" class=\"headerlink\" title=\"II. 分类–链栈\"></a>II. 分类–链栈</h3><h5 id=\"1-存储结构-1\"><a href=\"#1-存储结构-1\" class=\"headerlink\" title=\"1.存储结构\"></a>1.存储结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct StackNode&#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    struct StackNode *next;</span><br><span class=\"line\">&#125;StackNode, *LinkStack;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-初始化-1\"><a href=\"#2-初始化-1\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h5><p>步骤：<br><br>a. 构造一个空栈，不用设头结点，直接将栈顶指针置空</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status InitStack(LinkStack &amp;S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    S &#x3D; NULL;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-入栈-1\"><a href=\"#3-入栈-1\" class=\"headerlink\" title=\"3.入栈\"></a>3.入栈</h5><p>步骤：<br><br>a. 为入栈元素分配空间，并用新指针结点指向<br><br>b. 新结点值设为e <br><br>c. 新结点插入栈顶，修改栈顶指针为p</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status Push(LinkStack &amp;S, ElemType e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LinkStack p &#x3D; new StackNode; &#x2F;&#x2F;生成新结点</span><br><span class=\"line\">    p-&gt;data &#x3D; e; </span><br><span class=\"line\">    p-&gt;next &#x3D; S; &#x2F;&#x2F;插到栈顶</span><br><span class=\"line\">    S &#x3D; p; &#x2F;&#x2F;修改栈顶指针为p</span><br><span class=\"line\"></span><br><span class=\"line\">    return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-出栈-1\"><a href=\"#4-出栈-1\" class=\"headerlink\" title=\"4.出栈\"></a>4.出栈</h5><p>步骤： <br><br>a. 判断是否为空 <br><br>b. 将栈顶元素赋给e，临时保存栈顶元素空间，以备释放<br><br>c. 修改栈顶指针，指向新元素<br><br>d. 释放原栈顶元素空间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status Pop(LinkStack &amp;S, ElemType &amp;e)&#123;</span><br><span class=\"line\">    if(S&#x3D;&#x3D;NULL) return ERROR;</span><br><span class=\"line\">    LinkStack p &#x3D; new StackNode;</span><br><span class=\"line\">    e &#x3D; S-&gt;data;</span><br><span class=\"line\">    p &#x3D; S; &#x2F;&#x2F;p临时保存栈顶元素空间，以备释放</span><br><span class=\"line\">    S &#x3D; S-&gt;next;</span><br><span class=\"line\">    delete p;</span><br><span class=\"line\"></span><br><span class=\"line\">    return OK;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-取栈顶元素-1\"><a href=\"#5-取栈顶元素-1\" class=\"headerlink\" title=\"5.取栈顶元素\"></a>5.取栈顶元素</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status GetTop(LinkStack &amp;S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(S!&#x3D;NULL)</span><br><span class=\"line\">        return S-&gt;data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-完整实现（java）-1\"><a href=\"#6-完整实现（java）-1\" class=\"headerlink\" title=\"6.完整实现（java）\"></a>6.完整实现（java）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;链栈类代码</span><br><span class=\"line\">package stack;</span><br><span class=\"line\">import java.lang.NullPointerException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LinkStack &#123;</span><br><span class=\"line\">    private Element base;</span><br><span class=\"line\">    private Element top;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Element&#123;</span><br><span class=\"line\">        public Object data;</span><br><span class=\"line\">        public Element next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;初始化</span><br><span class=\"line\">    void initStack()&#123;</span><br><span class=\"line\">        top &#x3D; new Element();</span><br><span class=\"line\">        base &#x3D; new Element();</span><br><span class=\"line\"></span><br><span class=\"line\">        top.data &#x3D; null;</span><br><span class=\"line\">        top.next &#x3D; null;</span><br><span class=\"line\">        base.data &#x3D; null;</span><br><span class=\"line\">        base.next &#x3D; null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;入栈</span><br><span class=\"line\">    void push(Object o)&#123;</span><br><span class=\"line\">        Element e &#x3D; new Element();</span><br><span class=\"line\">        e.data &#x3D; o;</span><br><span class=\"line\">        &#x2F;&#x2F;empty stack</span><br><span class=\"line\">        if(top.next&#x3D;&#x3D;base)&#123;</span><br><span class=\"line\">            e.next &#x3D; base;</span><br><span class=\"line\">            top.next &#x3D; e;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            e.next &#x3D; top.next;</span><br><span class=\"line\">            top.next &#x3D; e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;出栈</span><br><span class=\"line\">    void pop()&#123;</span><br><span class=\"line\">        if(top.next&#x3D;&#x3D;base)&#123;</span><br><span class=\"line\">            System.out.println(&quot;栈中没有元素&quot;);</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            System.out.println(&quot;出栈：&quot; + top.next.data);</span><br><span class=\"line\">            top.next &#x3D; top.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;print</span><br><span class=\"line\">    void print()&#123;</span><br><span class=\"line\">        System.out.println(&quot;打印栈：\\n&quot;);</span><br><span class=\"line\">        Element temp &#x3D; top;</span><br><span class=\"line\">        while(temp.next!&#x3D;base)&#123;</span><br><span class=\"line\">            System.out.println(temp.next.data + &quot;\\t&quot;);</span><br><span class=\"line\">            temp &#x3D; temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;链栈测试代码</span><br><span class=\"line\">package stack;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LinkStackMain &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        LinkStack ls &#x3D; new LinkStack();</span><br><span class=\"line\">        ls.initStack();</span><br><span class=\"line\"></span><br><span class=\"line\">        ls.push(1);</span><br><span class=\"line\">        ls.push(2);</span><br><span class=\"line\">        ls.push(3);</span><br><span class=\"line\">        ls.push(4);</span><br><span class=\"line\">        ls.print();</span><br><span class=\"line\"></span><br><span class=\"line\">        ls.pop();</span><br><span class=\"line\">        ls.pop();</span><br><span class=\"line\">        ls.print();</span><br><span class=\"line\"></span><br><span class=\"line\">        ls.pop();</span><br><span class=\"line\">        ls.pop();</span><br><span class=\"line\">        ls.print();</span><br><span class=\"line\">        ls.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"顺序栈与链栈的区别\"><a href=\"#顺序栈与链栈的区别\" class=\"headerlink\" title=\"顺序栈与链栈的区别\"></a><strong>顺序栈与链栈的区别</strong></h4><ul>\n<li>存储结构<ul>\n<li>顺序栈：<strong>顺序存储</strong></li>\n<li>链栈： <strong>链式存储</strong></li>\n<li><strong>链栈通常不会出现栈满情况，链栈动态分配内存，不浪费内存；顺序栈使用固定大小数组保存数据，容易浪费内存</strong></li>\n</ul>\n</li>\n<li>top指针区别<ul>\n<li>顺序栈：指向栈顶的空白元素处，top-1才是指向栈顶元素</li>\n<li>链栈：指向栈顶实在的元素</li>\n</ul>\n</li>\n<li>入栈<ul>\n<li>顺序栈需要判断栈是否满，链栈不用</li>\n</ul>\n</li>\n<li>出栈<ul>\n<li>都需要判断栈是否空，链栈需要释放栈元素的空间 </li>\n</ul>\n</li>\n</ul>\n","more":"<h3 id=\"I-分类–顺序栈\"><a href=\"#I-分类–顺序栈\" class=\"headerlink\" title=\"I. 分类–顺序栈\"></a>I. 分类–顺序栈</h3><h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><p>(插入图片)</p>\n<h5 id=\"1-存储结构\"><a href=\"#1-存储结构\" class=\"headerlink\" title=\"1.存储结构\"></a>1.存储结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MAXSIZE 100</span><br><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">    SElemType *base; &#x2F;&#x2F;栈底指针，指向栈底元素</span><br><span class=\"line\">    SElemType *top;  &#x2F;&#x2F;栈顶指针</span><br><span class=\"line\">    int stacksize;   &#x2F;&#x2F;栈可用的最大容量</span><br><span class=\"line\">&#125;SqStack;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h5><p>步骤：<br><br>a. 为顺序栈分配一个最大容量<strong>MAXZISE</strong>的数组空间 <br><br>b. 栈顶指针<strong>top</strong>初始化为栈底指针<strong>base</strong>，表示空栈 <br><br>c. stacksize设为栈的最大容量<strong>MAXSIZE</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status InitStack(SqStack &amp;S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    S.base &#x3D; new SElemType[MAXSIZE]; &#x2F;&#x2F;动态分配最大容量为MAXSIZE的数组</span><br><span class=\"line\">    if(!S.base) exit(EOVERFLOW);</span><br><span class=\"line\">    S.top &#x3D; S.base; &#x2F;&#x2F;空栈</span><br><span class=\"line\">    S.stacksize &#x3D; MAXSIZE;;</span><br><span class=\"line\">    return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-入栈\"><a href=\"#3-入栈\" class=\"headerlink\" title=\"3.入栈\"></a>3.入栈</h5><p>步骤：<br><br>a. 判断栈容量是否已满 <br><br>b. 将插入的元素压入栈顶，栈顶指针加1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status Push(SqStack &amp;S, SElemType e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(S.top-S.base&#x3D;&#x3D;S.stacksize)</span><br><span class=\"line\">        return ERROR;</span><br><span class=\"line\">    &#x2F;&#x2F; *S.top++ &#x3D; e;</span><br><span class=\"line\">    *S.top &#x3D; e;</span><br><span class=\"line\">    S.top++;</span><br><span class=\"line\">   return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-出栈\"><a href=\"#4-出栈\" class=\"headerlink\" title=\"4.出栈\"></a>4.出栈</h5><p>步骤: <br><br>a. 判断栈是否为空 <br><br>b. 先将栈顶指针减1，再将要出栈的元素赋给栈顶指针所指的值,栈顶元素出栈 <br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status Pop(SqStack &amp;S, SElemType &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(S.top&#x3D;&#x3D;S.base)</span><br><span class=\"line\">        return ERROR;</span><br><span class=\"line\">    S.top--;</span><br><span class=\"line\">    e &#x3D; *S.top;</span><br><span class=\"line\">    &#x2F;&#x2F;e &#x3D; *--S.top;</span><br><span class=\"line\">    return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-取栈顶元素\"><a href=\"#5-取栈顶元素\" class=\"headerlink\" title=\"5.取栈顶元素\"></a>5.取栈顶元素</h5><p>步骤：<br><br>a. 若非空，返回栈顶指针的值，<strong>栈顶指针保持不变</strong> <br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status GetTop(SqStack &amp;S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(S.top!&#x3D;S.base)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return *(S.top-1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-完整实现（java）\"><a href=\"#6-完整实现（java）\" class=\"headerlink\" title=\"6.完整实现（java）\"></a>6.完整实现（java）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"II-分类–链栈\"><a href=\"#II-分类–链栈\" class=\"headerlink\" title=\"II. 分类–链栈\"></a>II. 分类–链栈</h3><h5 id=\"1-存储结构-1\"><a href=\"#1-存储结构-1\" class=\"headerlink\" title=\"1.存储结构\"></a>1.存储结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct StackNode&#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    struct StackNode *next;</span><br><span class=\"line\">&#125;StackNode, *LinkStack;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-初始化-1\"><a href=\"#2-初始化-1\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h5><p>步骤：<br><br>a. 构造一个空栈，不用设头结点，直接将栈顶指针置空</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status InitStack(LinkStack &amp;S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    S &#x3D; NULL;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-入栈-1\"><a href=\"#3-入栈-1\" class=\"headerlink\" title=\"3.入栈\"></a>3.入栈</h5><p>步骤：<br><br>a. 为入栈元素分配空间，并用新指针结点指向<br><br>b. 新结点值设为e <br><br>c. 新结点插入栈顶，修改栈顶指针为p</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status Push(LinkStack &amp;S, ElemType e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LinkStack p &#x3D; new StackNode; &#x2F;&#x2F;生成新结点</span><br><span class=\"line\">    p-&gt;data &#x3D; e; </span><br><span class=\"line\">    p-&gt;next &#x3D; S; &#x2F;&#x2F;插到栈顶</span><br><span class=\"line\">    S &#x3D; p; &#x2F;&#x2F;修改栈顶指针为p</span><br><span class=\"line\"></span><br><span class=\"line\">    return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-出栈-1\"><a href=\"#4-出栈-1\" class=\"headerlink\" title=\"4.出栈\"></a>4.出栈</h5><p>步骤： <br><br>a. 判断是否为空 <br><br>b. 将栈顶元素赋给e，临时保存栈顶元素空间，以备释放<br><br>c. 修改栈顶指针，指向新元素<br><br>d. 释放原栈顶元素空间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status Pop(LinkStack &amp;S, ElemType &amp;e)&#123;</span><br><span class=\"line\">    if(S&#x3D;&#x3D;NULL) return ERROR;</span><br><span class=\"line\">    LinkStack p &#x3D; new StackNode;</span><br><span class=\"line\">    e &#x3D; S-&gt;data;</span><br><span class=\"line\">    p &#x3D; S; &#x2F;&#x2F;p临时保存栈顶元素空间，以备释放</span><br><span class=\"line\">    S &#x3D; S-&gt;next;</span><br><span class=\"line\">    delete p;</span><br><span class=\"line\"></span><br><span class=\"line\">    return OK;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-取栈顶元素-1\"><a href=\"#5-取栈顶元素-1\" class=\"headerlink\" title=\"5.取栈顶元素\"></a>5.取栈顶元素</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status GetTop(LinkStack &amp;S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(S!&#x3D;NULL)</span><br><span class=\"line\">        return S-&gt;data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-完整实现（java）-1\"><a href=\"#6-完整实现（java）-1\" class=\"headerlink\" title=\"6.完整实现（java）\"></a>6.完整实现（java）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;链栈类代码</span><br><span class=\"line\">package stack;</span><br><span class=\"line\">import java.lang.NullPointerException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LinkStack &#123;</span><br><span class=\"line\">    private Element base;</span><br><span class=\"line\">    private Element top;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Element&#123;</span><br><span class=\"line\">        public Object data;</span><br><span class=\"line\">        public Element next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;初始化</span><br><span class=\"line\">    void initStack()&#123;</span><br><span class=\"line\">        top &#x3D; new Element();</span><br><span class=\"line\">        base &#x3D; new Element();</span><br><span class=\"line\"></span><br><span class=\"line\">        top.data &#x3D; null;</span><br><span class=\"line\">        top.next &#x3D; null;</span><br><span class=\"line\">        base.data &#x3D; null;</span><br><span class=\"line\">        base.next &#x3D; null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;入栈</span><br><span class=\"line\">    void push(Object o)&#123;</span><br><span class=\"line\">        Element e &#x3D; new Element();</span><br><span class=\"line\">        e.data &#x3D; o;</span><br><span class=\"line\">        &#x2F;&#x2F;empty stack</span><br><span class=\"line\">        if(top.next&#x3D;&#x3D;base)&#123;</span><br><span class=\"line\">            e.next &#x3D; base;</span><br><span class=\"line\">            top.next &#x3D; e;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            e.next &#x3D; top.next;</span><br><span class=\"line\">            top.next &#x3D; e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;出栈</span><br><span class=\"line\">    void pop()&#123;</span><br><span class=\"line\">        if(top.next&#x3D;&#x3D;base)&#123;</span><br><span class=\"line\">            System.out.println(&quot;栈中没有元素&quot;);</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            System.out.println(&quot;出栈：&quot; + top.next.data);</span><br><span class=\"line\">            top.next &#x3D; top.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;print</span><br><span class=\"line\">    void print()&#123;</span><br><span class=\"line\">        System.out.println(&quot;打印栈：\\n&quot;);</span><br><span class=\"line\">        Element temp &#x3D; top;</span><br><span class=\"line\">        while(temp.next!&#x3D;base)&#123;</span><br><span class=\"line\">            System.out.println(temp.next.data + &quot;\\t&quot;);</span><br><span class=\"line\">            temp &#x3D; temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;链栈测试代码</span><br><span class=\"line\">package stack;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LinkStackMain &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        LinkStack ls &#x3D; new LinkStack();</span><br><span class=\"line\">        ls.initStack();</span><br><span class=\"line\"></span><br><span class=\"line\">        ls.push(1);</span><br><span class=\"line\">        ls.push(2);</span><br><span class=\"line\">        ls.push(3);</span><br><span class=\"line\">        ls.push(4);</span><br><span class=\"line\">        ls.print();</span><br><span class=\"line\"></span><br><span class=\"line\">        ls.pop();</span><br><span class=\"line\">        ls.pop();</span><br><span class=\"line\">        ls.print();</span><br><span class=\"line\"></span><br><span class=\"line\">        ls.pop();</span><br><span class=\"line\">        ls.pop();</span><br><span class=\"line\">        ls.print();</span><br><span class=\"line\">        ls.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"顺序栈与链栈的区别\"><a href=\"#顺序栈与链栈的区别\" class=\"headerlink\" title=\"顺序栈与链栈的区别\"></a><strong>顺序栈与链栈的区别</strong></h4><ul>\n<li>存储结构<ul>\n<li>顺序栈：<strong>顺序存储</strong></li>\n<li>链栈： <strong>链式存储</strong></li>\n<li><strong>链栈通常不会出现栈满情况，链栈动态分配内存，不浪费内存；顺序栈使用固定大小数组保存数据，容易浪费内存</strong></li>\n</ul>\n</li>\n<li>top指针区别<ul>\n<li>顺序栈：指向栈顶的空白元素处，top-1才是指向栈顶元素</li>\n<li>链栈：指向栈顶实在的元素</li>\n</ul>\n</li>\n<li>入栈<ul>\n<li>顺序栈需要判断栈是否满，链栈不用</li>\n</ul>\n</li>\n<li>出栈<ul>\n<li>都需要判断栈是否空，链栈需要释放栈元素的空间 </li>\n</ul>\n</li>\n</ul>","categories":[],"tags":[{"name":"数据结构","path":"api/tags/数据结构.json"},{"name":"栈","path":"api/tags/栈.json"}]}