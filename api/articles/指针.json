{"title":"指针","slug":"指针","date":"2020-07-14T07:16:31.045Z","updated":"2020-07-14T10:59:00.178Z","comments":true,"path":"api/articles/指针.json","excerpt":"指针听说是永远的神，今天就来接触接触神吧~","covers":null,"content":"<p>指针听说是永远的神，今天就来接触接触神吧~ <a id=\"more\"></a><br>通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。</p>\n<h2 id=\"指针介绍\"><a href=\"#指针介绍\" class=\"headerlink\" title=\"指针介绍\"></a>指针介绍</h2><p>指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。<br>下面通过一个例子来简单了解下指针：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>  var1;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> var2[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"var1 变量的地址： %p\\n\"</span>, &amp;var1);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"var2 变量的地址： %p\\n\"</span>, &amp;var2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<blockquote>\n<p>var1 变量的地址： 008FFAC4<br>var2 变量的地址： 008FFAB0</p>\n</blockquote>\n<h2 id=\"指针的使用\"><a href=\"#指针的使用\" class=\"headerlink\" title=\"指针的使用\"></a>指针的使用</h2><p>使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 * 来返回位于操作数所指定地址的变量的值。<br>例如下面这个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span>  var = <span class=\"number\">20</span>;   <span class=\"comment\">/* 实际变量的声明 */</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span>  *ip;        <span class=\"comment\">/* 指针变量的声明 */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   ip = &amp;var;  <span class=\"comment\">/* 在指针变量中存储 var 的地址 */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Address of var variable: %p\\n\"</span>, &amp;var  );</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/* 在指针变量中存储的地址 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Address stored in ip variable: %p\\n\"</span>, ip );</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/* 使用指针访问值 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Value of *ip variable: %d\\n\"</span>, *ip );</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>Address of var variable: bffd8b3c<br>Address stored in ip variable: bffd8b3c<br>Value of *ip variable: 20</p>\n</blockquote>\n<h2 id=\"空指针\"><a href=\"#空指针\" class=\"headerlink\" title=\"空指针\"></a>空指针</h2><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为空指针。<br>NULL 指针是一个定义在标准库中的值为零的常量。<br>在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。 </p>\n<h2 id=\"指针的算术运算\"><a href=\"#指针的算术运算\" class=\"headerlink\" title=\"指针的算术运算\"></a>指针的算术运算</h2><p>指针是一个用数值表示的地址，所以指针有4种算术运算：++、–、+、-。</p>\n<ul>\n<li>指针的每一次递增，是指向下一个元素的存储单元。</li>\n<li>指针的每一次递减，是指向前一个元素的存储单元。</li>\n<li>指针在递增和递减时跳跃的字节数取决于指针所指向变量的数据类型长度，比如int是4个字节。</li>\n</ul>\n<h3 id=\"指针的递增运算\"><a href=\"#指针的递增运算\" class=\"headerlink\" title=\"指针的递增运算\"></a>指针的递增运算</h3><p>下面以指针的递增运算简单描述下指针的算术运算</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> var[] = &#123; <span class=\"number\">10</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, * ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针中的数组地址</span></span><br><span class=\"line\">\tptr = var;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; MAX; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"存储地址：var[%d] = %x\\n\"</span>, i, ptr);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"存储值：var[%d] = %d\\n\"</span>, i, *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tptr++;<span class=\"comment\">//移动到下一个位置</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>存储地址：var[0] = 4c56f568<br>存储值：var[0] = 10<br>存储地址：var[1] = 4c56f56c<br>存储值：var[1] = 100<br>存储地址：var[2] = 4c56f570<br>存储值：var[2] = 200</p>\n</blockquote>\n<p>因此，指针的递减运算也是一样的操作。</p>\n<h3 id=\"指针的比较\"><a href=\"#指针的比较\" class=\"headerlink\" title=\"指针的比较\"></a>指针的比较</h3><p>指针可以用关系运算符进行比较，如 ==、&lt; 和 &gt;。如果 p1 和 p2 指向两个相关的变量，比如同一个数组中的不同元素，则可对 p1 和 p2 进行大小比较。<br>例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> var[] = &#123; <span class=\"number\">10</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, * ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针中的数组地址</span></span><br><span class=\"line\">\tptr = var;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ptr &lt;= &amp;var[MAX<span class=\"number\">-1</span>]) <span class=\"comment\">//如果变量指针所指向的地址小于或等于数组的最后一个元素的地址，则执行以下操作</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"存储地址：var[%d] = %x\\n\"</span>, i, ptr);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"存储值：var[%d] = %d\\n\"</span>, i, *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tptr++;<span class=\"comment\">//移动到下一个位置</span></span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>存储地址：var[0] = 7370fb58<br>存储值：var[0] = 10<br>存储地址：var[1] = 7370fb5c<br>存储值：var[1] = 100<br>存储地址：var[2] = 7370fb60<br>存储值：var[2] = 200</p>\n</blockquote>\n<h2 id=\"指向指针的指针\"><a href=\"#指向指针的指针\" class=\"headerlink\" title=\"指向指针的指针\"></a>指向指针的指针</h2><p>指向指针的指针是一种多级间接寻址的形式，或者说是一个指针链。通常，一个指针包含一个变量的地址。当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>  var;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* ptr;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>** pptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 获取 var 的地址 */</span></span><br><span class=\"line\">\tptr = &amp;var;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 使用运算符 &amp; 获取 ptr 的地址 */</span></span><br><span class=\"line\">\tpptr = &amp;ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 使用 pptr 获取值 */</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Value of var = %d\\n\"</span>, var);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Value available at *ptr = %d\\n\"</span>, *ptr);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Value available at **pptr = %d\\n\"</span>, **pptr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>Value of var = 3000<br>Value available at <em>ptr = 3000<br>Value available at *</em>pptr = 3000</p>\n</blockquote>\n","more":"<br>通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。</p>\n<h2 id=\"指针介绍\"><a href=\"#指针介绍\" class=\"headerlink\" title=\"指针介绍\"></a>指针介绍</h2><p>指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。<br>下面通过一个例子来简单了解下指针：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>  var1;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> var2[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"var1 变量的地址： %p\\n\"</span>, &amp;var1);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"var2 变量的地址： %p\\n\"</span>, &amp;var2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<blockquote>\n<p>var1 变量的地址： 008FFAC4<br>var2 变量的地址： 008FFAB0</p>\n</blockquote>\n<h2 id=\"指针的使用\"><a href=\"#指针的使用\" class=\"headerlink\" title=\"指针的使用\"></a>指针的使用</h2><p>使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 * 来返回位于操作数所指定地址的变量的值。<br>例如下面这个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span>  var = <span class=\"number\">20</span>;   <span class=\"comment\">/* 实际变量的声明 */</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span>  *ip;        <span class=\"comment\">/* 指针变量的声明 */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   ip = &amp;var;  <span class=\"comment\">/* 在指针变量中存储 var 的地址 */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Address of var variable: %p\\n\"</span>, &amp;var  );</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/* 在指针变量中存储的地址 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Address stored in ip variable: %p\\n\"</span>, ip );</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/* 使用指针访问值 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Value of *ip variable: %d\\n\"</span>, *ip );</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>Address of var variable: bffd8b3c<br>Address stored in ip variable: bffd8b3c<br>Value of *ip variable: 20</p>\n</blockquote>\n<h2 id=\"空指针\"><a href=\"#空指针\" class=\"headerlink\" title=\"空指针\"></a>空指针</h2><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为空指针。<br>NULL 指针是一个定义在标准库中的值为零的常量。<br>在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。 </p>\n<h2 id=\"指针的算术运算\"><a href=\"#指针的算术运算\" class=\"headerlink\" title=\"指针的算术运算\"></a>指针的算术运算</h2><p>指针是一个用数值表示的地址，所以指针有4种算术运算：++、–、+、-。</p>\n<ul>\n<li>指针的每一次递增，是指向下一个元素的存储单元。</li>\n<li>指针的每一次递减，是指向前一个元素的存储单元。</li>\n<li>指针在递增和递减时跳跃的字节数取决于指针所指向变量的数据类型长度，比如int是4个字节。</li>\n</ul>\n<h3 id=\"指针的递增运算\"><a href=\"#指针的递增运算\" class=\"headerlink\" title=\"指针的递增运算\"></a>指针的递增运算</h3><p>下面以指针的递增运算简单描述下指针的算术运算</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> var[] = &#123; <span class=\"number\">10</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, * ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针中的数组地址</span></span><br><span class=\"line\">\tptr = var;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; MAX; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"存储地址：var[%d] = %x\\n\"</span>, i, ptr);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"存储值：var[%d] = %d\\n\"</span>, i, *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tptr++;<span class=\"comment\">//移动到下一个位置</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>存储地址：var[0] = 4c56f568<br>存储值：var[0] = 10<br>存储地址：var[1] = 4c56f56c<br>存储值：var[1] = 100<br>存储地址：var[2] = 4c56f570<br>存储值：var[2] = 200</p>\n</blockquote>\n<p>因此，指针的递减运算也是一样的操作。</p>\n<h3 id=\"指针的比较\"><a href=\"#指针的比较\" class=\"headerlink\" title=\"指针的比较\"></a>指针的比较</h3><p>指针可以用关系运算符进行比较，如 ==、&lt; 和 &gt;。如果 p1 和 p2 指向两个相关的变量，比如同一个数组中的不同元素，则可对 p1 和 p2 进行大小比较。<br>例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> var[] = &#123; <span class=\"number\">10</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, * ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针中的数组地址</span></span><br><span class=\"line\">\tptr = var;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ptr &lt;= &amp;var[MAX<span class=\"number\">-1</span>]) <span class=\"comment\">//如果变量指针所指向的地址小于或等于数组的最后一个元素的地址，则执行以下操作</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"存储地址：var[%d] = %x\\n\"</span>, i, ptr);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"存储值：var[%d] = %d\\n\"</span>, i, *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tptr++;<span class=\"comment\">//移动到下一个位置</span></span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>存储地址：var[0] = 7370fb58<br>存储值：var[0] = 10<br>存储地址：var[1] = 7370fb5c<br>存储值：var[1] = 100<br>存储地址：var[2] = 7370fb60<br>存储值：var[2] = 200</p>\n</blockquote>\n<h2 id=\"指向指针的指针\"><a href=\"#指向指针的指针\" class=\"headerlink\" title=\"指向指针的指针\"></a>指向指针的指针</h2><p>指向指针的指针是一种多级间接寻址的形式，或者说是一个指针链。通常，一个指针包含一个变量的地址。当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>  var;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* ptr;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>** pptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 获取 var 的地址 */</span></span><br><span class=\"line\">\tptr = &amp;var;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 使用运算符 &amp; 获取 ptr 的地址 */</span></span><br><span class=\"line\">\tpptr = &amp;ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 使用 pptr 获取值 */</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Value of var = %d\\n\"</span>, var);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Value available at *ptr = %d\\n\"</span>, *ptr);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Value available at **pptr = %d\\n\"</span>, **pptr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>Value of var = 3000<br>Value available at <em>ptr = 3000<br>Value available at *</em>pptr = 3000</p>\n</blockquote>","categories":[],"tags":[{"name":"c/c++","path":"api/tags/c/c++.json"},{"name":"指针","path":"api/tags/指针.json"}]}