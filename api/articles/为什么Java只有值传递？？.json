{"title":"为什么Java只有值传递","slug":"为什么Java只有值传递？？","date":"2021-03-15T14:01:36.796Z","updated":"2021-03-15T16:41:18.328Z","comments":true,"path":"api/articles/为什么Java只有值传递？？.json","excerpt":"为什么Java只有值传递？？值传递： 调用函数时，将实参复制一份传给函数，函数中修改参数时不会影响实参<br><br>引用传递：调用函数时，将实参的地址传给函数，函数中修改参数会影响实参。<br><br>判断是值传递还是引用传递的标准，和传递参数的类型是没有关系的。","covers":["https://image-static.segmentfault.com/264/295/2642951147-5e15dfbff00dc_articlex","https://image-static.segmentfault.com/253/145/2531458419-5e15dfc07bc3d_articlex","https://image-static.segmentfault.com/368/622/3686221859-5e15dfc103afb_articlex"],"content":"<h3 id=\"为什么Java只有值传递？？\"><a href=\"#为什么Java只有值传递？？\" class=\"headerlink\" title=\"为什么Java只有值传递？？\"></a>为什么Java只有值传递？？</h3><p><strong>值传递：</strong> 调用函数时，将实参复制一份传给函数，函数中修改参数时不会影响实参<br><br><strong>引用传递</strong>：调用函数时，将实参的地址传给函数，函数中修改参数会影响实参。<br><br><strong>判断是值传递还是引用传递的标准，和传递参数的类型是没有关系的。</strong></p>\n<a id=\"more\"></a>\n\n<h3 id=\"Java中的栈与堆\"><a href=\"#Java中的栈与堆\" class=\"headerlink\" title=\"Java中的栈与堆\"></a>Java中的栈与堆</h3><ul>\n<li><p>栈：存放基本类型的局部变量，与对象的引用，方法执行结束后栈中的变量和对象的引用消失。</p>\n</li>\n<li><p>堆：存放对象的实例。java中的数组和new出来的对象都是放在堆中的，堆中的对象没有任何引用(就是在栈中没有任何一个变量指向该对象)时会被GC回收。</p>\n</li>\n</ul>\n<h4 id=\"1-值传递\"><a href=\"#1-值传递\" class=\"headerlink\" title=\"1-值传递\"></a>1-值传递</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestNum</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改前的num值:\"</span>+num);</span><br><span class=\"line\">        changeValue(num);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改后的num值:\"</span>+num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeValue</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        num = <span class=\"number\">5</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"形参num值:\"</span>+num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改前的num值:3</span><br><span class=\"line\">形参num值:5</span><br><span class=\"line\">修改后的num值:3</span><br></pre></td></tr></table></figure>\n<p>值传递不是简单的把实参传递给形参，而是，实参建立了一个副本，然后把副本传递给了形参。图中num是实参，然后创建了一个副本temp，把它传递给形参value，修改value值对实参num没有任何影响。</p>\n<p><img src=\"https://image-static.segmentfault.com/264/295/2642951147-5e15dfbff00dc_articlex\" alt=\"image\"></p>\n<h4 id=\"2-引用传递\"><a href=\"#2-引用传递\" class=\"headerlink\" title=\"2-引用传递\"></a>2-引用传递</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java_learn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">int</span> age, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"age=\"</span> + age +</span><br><span class=\"line\">                <span class=\"string\">\", name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestUser</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"number\">18</span>, <span class=\"string\">\"zhangsan\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改对象前:\"</span>+user);</span><br><span class=\"line\">        changeUser(user);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改对象后:\"</span>+user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        user.setAge(<span class=\"number\">20</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"lisi\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改对象前:User&#123;age&#x3D;18, name&#x3D;&#39;zhangsan&#39;&#125;</span><br><span class=\"line\">修改对象后:User&#123;age&#x3D;20, name&#x3D;&#39;lisi&#39;&#125;</span><br></pre></td></tr></table></figure>\n<p>可以发现，传过去的user对象，属性值被改变了。由于，user对象存放在堆里边，其引用存放在栈里边，其参数传递图如下。<br><br>user是对象的引用，为实参，然后创建一个副本temp，把它传递给形参user1。但是，他们实际操作的都是堆内存中的同一个User对象。因此，对象内容的修改也会体现到实参user上。<br><img src=\"https://image-static.segmentfault.com/253/145/2531458419-5e15dfc07bc3d_articlex\" alt=\"image\"></p>\n<h4 id=\"3-传递类型是String类型\"><a href=\"#3-传递类型是String类型\" class=\"headerlink\" title=\"3-传递类型是String类型\"></a>3-传递类型是String类型</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStr</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"zhangsan\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"字符串修改前:\"</span>+str);</span><br><span class=\"line\">        changeStr(str);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"字符串修改后:\"</span>+str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeStr</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        str = <span class=\"string\">\"lisi\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串修改前:zhangsan</span><br><span class=\"line\">字符串修改后:zhangsan</span><br></pre></td></tr></table></figure>\n<p>String也是引用类型，为什么在这又不变了呢？传递参数是引用类型，并不代表就是引用传递，其实它还是值传递。<br><br>图中，str是对象 zhangsan的引用，为实参，然后创建了一个副本temp，把它传递给了形参str1。此时，创建了一个新的对象 lisi ，形参str1指向这个对象，但是原来的实参str还是指向zhangsan。因此，形参内容的修改并不会影响到实参内容。<br><br>所以，两次打印结果都是zhangsan。<br><img src=\"https://image-static.segmentfault.com/368/622/3686221859-5e15dfc103afb_articlex\" alt=\"image\"></p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>值传递，不论传递的参数类型是值类型还是引用类型，都会在调用栈上创建一个形参的副本。不同的是，对于值类型来说，复制的就是整个原始值的复制。而对于引用类型来说，由于在调用栈中只存储对象的引用，因此复制的只是这个引用，而不是原始对象。</p>\n<p>最后，再次强调一下，传递参数是引用类型，或者说是对象时，并不代表它就是引用传递。引用传递不是用来形容参数的类型的，不要被“引用”这个词本身迷惑了。这就如同我们生活中说的地瓜不是瓜，而是红薯一样。</p>\n<ul>\n<li>参数传递时，是拷贝实参的副本，然后传递给形参。（值传递）</li>\n<li>在函数中，只有修改了实参所指向的对象内容，才会影响到实参。</li>\n</ul>\n","more":"<h3 id=\"Java中的栈与堆\"><a href=\"#Java中的栈与堆\" class=\"headerlink\" title=\"Java中的栈与堆\"></a>Java中的栈与堆</h3><ul>\n<li><p>栈：存放基本类型的局部变量，与对象的引用，方法执行结束后栈中的变量和对象的引用消失。</p>\n</li>\n<li><p>堆：存放对象的实例。java中的数组和new出来的对象都是放在堆中的，堆中的对象没有任何引用(就是在栈中没有任何一个变量指向该对象)时会被GC回收。</p>\n</li>\n</ul>\n<h4 id=\"1-值传递\"><a href=\"#1-值传递\" class=\"headerlink\" title=\"1-值传递\"></a>1-值传递</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestNum</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改前的num值:\"</span>+num);</span><br><span class=\"line\">        changeValue(num);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改后的num值:\"</span>+num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeValue</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        num = <span class=\"number\">5</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"形参num值:\"</span>+num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改前的num值:3</span><br><span class=\"line\">形参num值:5</span><br><span class=\"line\">修改后的num值:3</span><br></pre></td></tr></table></figure>\n<p>值传递不是简单的把实参传递给形参，而是，实参建立了一个副本，然后把副本传递给了形参。图中num是实参，然后创建了一个副本temp，把它传递给形参value，修改value值对实参num没有任何影响。</p>\n<p><img src=\"https://image-static.segmentfault.com/264/295/2642951147-5e15dfbff00dc_articlex\" alt=\"image\"></p>\n<h4 id=\"2-引用传递\"><a href=\"#2-引用传递\" class=\"headerlink\" title=\"2-引用传递\"></a>2-引用传递</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java_learn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(<span class=\"keyword\">int</span> age, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"age=\"</span> + age +</span><br><span class=\"line\">                <span class=\"string\">\", name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestUser</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"number\">18</span>, <span class=\"string\">\"zhangsan\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改对象前:\"</span>+user);</span><br><span class=\"line\">        changeUser(user);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改对象后:\"</span>+user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        user.setAge(<span class=\"number\">20</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"lisi\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改对象前:User&#123;age&#x3D;18, name&#x3D;&#39;zhangsan&#39;&#125;</span><br><span class=\"line\">修改对象后:User&#123;age&#x3D;20, name&#x3D;&#39;lisi&#39;&#125;</span><br></pre></td></tr></table></figure>\n<p>可以发现，传过去的user对象，属性值被改变了。由于，user对象存放在堆里边，其引用存放在栈里边，其参数传递图如下。<br><br>user是对象的引用，为实参，然后创建一个副本temp，把它传递给形参user1。但是，他们实际操作的都是堆内存中的同一个User对象。因此，对象内容的修改也会体现到实参user上。<br><img src=\"https://image-static.segmentfault.com/253/145/2531458419-5e15dfc07bc3d_articlex\" alt=\"image\"></p>\n<h4 id=\"3-传递类型是String类型\"><a href=\"#3-传递类型是String类型\" class=\"headerlink\" title=\"3-传递类型是String类型\"></a>3-传递类型是String类型</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStr</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"zhangsan\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"字符串修改前:\"</span>+str);</span><br><span class=\"line\">        changeStr(str);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"字符串修改后:\"</span>+str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeStr</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        str = <span class=\"string\">\"lisi\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串修改前:zhangsan</span><br><span class=\"line\">字符串修改后:zhangsan</span><br></pre></td></tr></table></figure>\n<p>String也是引用类型，为什么在这又不变了呢？传递参数是引用类型，并不代表就是引用传递，其实它还是值传递。<br><br>图中，str是对象 zhangsan的引用，为实参，然后创建了一个副本temp，把它传递给了形参str1。此时，创建了一个新的对象 lisi ，形参str1指向这个对象，但是原来的实参str还是指向zhangsan。因此，形参内容的修改并不会影响到实参内容。<br><br>所以，两次打印结果都是zhangsan。<br><img src=\"https://image-static.segmentfault.com/368/622/3686221859-5e15dfc103afb_articlex\" alt=\"image\"></p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>值传递，不论传递的参数类型是值类型还是引用类型，都会在调用栈上创建一个形参的副本。不同的是，对于值类型来说，复制的就是整个原始值的复制。而对于引用类型来说，由于在调用栈中只存储对象的引用，因此复制的只是这个引用，而不是原始对象。</p>\n<p>最后，再次强调一下，传递参数是引用类型，或者说是对象时，并不代表它就是引用传递。引用传递不是用来形容参数的类型的，不要被“引用”这个词本身迷惑了。这就如同我们生活中说的地瓜不是瓜，而是红薯一样。</p>\n<ul>\n<li>参数传递时，是拷贝实参的副本，然后传递给形参。（值传递）</li>\n<li>在函数中，只有修改了实参所指向的对象内容，才会影响到实参。</li>\n</ul>","categories":[],"tags":[{"name":"java","path":"api/tags/java.json"}]}