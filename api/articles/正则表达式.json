{"title":"正则表达式","slug":"正则表达式","date":"2022-01-07T13:00:50.297Z","updated":"2022-01-08T12:32:03.129Z","comments":true,"path":"api/articles/正则表达式.json","excerpt":"正则表达式（Regular Expression）是用于匹配字符串中字符组合的模式，在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法,<br>以及 String 的 match、matchAll、replace、search 和 split 方法。正则表达式可用于所有文本搜索和文本替换的操作。<br>==那就开始吧~== ","covers":null,"content":"<p>正则表达式（Regular Expression）是用于匹配字符串中字符组合的模式，在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法,<br>以及 String 的 match、matchAll、replace、search 和 split 方法。<strong>正则表达式可用于所有文本搜索和文本替换的操作</strong>。<br>==那就开始吧~== </p>\n<a id=\"more\"></a>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p><code>/正则表达式主体/修饰符(可选)</code></p>\n<h3 id=\"使用字符串方法\"><a href=\"#使用字符串方法\" class=\"headerlink\" title=\"使用字符串方法\"></a>使用字符串方法</h3><p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。</p>\n<h4 id=\"search-方法\"><a href=\"#search-方法\" class=\"headerlink\" title=\"search()方法\"></a>search()方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * search</span></span><br><span class=\"line\"><span class=\"comment\"> * 搜索字符串中是否含有指定内容,返回子串的起始位置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"hello abc aec aqc\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.search(<span class=\"regexp\">/a[beq]c/</span>));</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>6</code></p>\n<h4 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * replace 替换</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"string\">'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.replace(<span class=\"string\">\"fox\"</span>,<span class=\"string\">\"Monkey\"</span>));</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>The quick brown Monkey jumps over the lazy dog. If the dog reacted, was it really lazy?</code></p>\n<h4 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * split(): 切片，除去该参数,将分割后的字符串存储到数组中的String方法中</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> str = <span class=\"string\">\"1z3v3f4n5i6s\"</span>;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> result = str.split(<span class=\"regexp\">/[0-9]/</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>[&#39;&#39;, &#39;z&#39;, &#39;v&#39;, &#39;f&#39;, &#39;n&#39;, &#39;i&#39;, &#39;s&#39;]</code></p>\n<h4 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a>match()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * match: 可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配</span></span><br><span class=\"line\"><span class=\"comment\">    */</span> </span><br><span class=\"line\">   <span class=\"keyword\">var</span> str = <span class=\"string\">\"The rain in SPAIN stays mainly in the plain\"</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> n = str.match(<span class=\"regexp\">/ain/g</span>);</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>ain,ain,ain</code></p>\n<h3 id=\"使用-RegExp-对象\"><a href=\"#使用-RegExp-对象\" class=\"headerlink\" title=\"使用 RegExp 对象\"></a>使用 RegExp 对象</h3><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test()\"></a>test()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * test()：检测一个字符串是否匹配某个模式</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> patt1=<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"e\"</span>);</span><br><span class=\"line\">   <span class=\"built_in\">document</span>.write(patt1.test(<span class=\"string\">\"The best things in life are free\"</span>));</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>true</code></p>\n<h4 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec()\"></a>exec()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * exec() </span></span><br><span class=\"line\"><span class=\"comment\"> * 方法用于检索字符串中的正则表达式的匹配</span></span><br><span class=\"line\"><span class=\"comment\"> * 该函数返回一个数组，其中存放匹配的结果,如果未找到匹配，则返回值为 null。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> patt1=<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"e\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(patt1.exec(<span class=\"string\">\"The best things in life are free\"</span>));</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>e</code></p>\n<h2 id=\"正则表达式修饰符\"><a href=\"#正则表达式修饰符\" class=\"headerlink\" title=\"正则表达式修饰符\"></a>正则表达式修饰符</h2><ul>\n<li>i : 执行对大小写不敏感的匹配。</li>\n<li>g : 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</li>\n<li>m : 执行多行匹配</li>\n</ul>\n<h2 id=\"正则表达式模式\"><a href=\"#正则表达式模式\" class=\"headerlink\" title=\"正则表达式模式\"></a>正则表达式模式</h2><h3 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h3><ul>\n<li>[abc] : 查找方括号之间的任何字符</li>\n<li>[0-9] : 查找任何从 0 至 9 的数字</li>\n<li>(x|y) : 查找任何以 | 分隔的选项</li>\n</ul>\n<h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><ul>\n<li>\\d : 查找数字</li>\n<li>\\s : 查找空白字符</li>\n<li>\\b : 匹配单词边界</li>\n<li>\\uxxxx : 查找以十六进制数 xxxx 规定的 Unicode 字符</li>\n<li>^ : 表示开头</li>\n<li>$ : 表示结尾</li>\n</ul>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><p><strong>量词只对前一个内容起作用</strong></p>\n<ul>\n<li>n+ : 匹配任何包含至少一个 n 的字符串</li>\n<li>n* : 匹配任何包含零个或多个 n 的字符串</li>\n<li>n? : 匹配任何包含零个或一个 n 的字符串</li>\n<li>‘+’ : 至少一个</li>\n<li>‘-’ : 0个</li>\n<li>{n} ：正好出现n次</li>\n<li>{m,n} ：出现m-n次</li>\n<li>{m, } : m次以上</li>\n</ul>\n<h4 id=\"小练习\"><a href=\"#小练习\" class=\"headerlink\" title=\"小练习\"></a>小练习</h4><p>去除以下字符串开头与结尾空格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"        he         llo       \"</span>;</span><br><span class=\"line\">str = str.replace(<span class=\"regexp\">/^\\s*|\\s*$/g</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n<p><code>he         llo</code></p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li>测试输入数字是否为手机号码<br>思路：</li>\n</ul>\n<ol>\n<li>手机号共11位</li>\n<li>第一位为1 ：^1</li>\n<li>第二位为3-9的数字 : [3-9]</li>\n<li>第三位以后为0-9的9位数字： [0-9]{9}$<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意^与$的使用</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> phone = <span class=\"string\">\"13553597193\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> phoneReg = <span class=\"regexp\">/^1[3-9][0-9]&#123;9&#125;$/</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(phoneReg.test(phone));</span><br></pre></td></tr></table></figure>\n<code>true</code></li>\n</ol>\n<ul>\n<li>测试邮箱账号是否符合规则</li>\n</ul>\n<p>思路看注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 任意字母数字下划线   .任意字符数字下划线（可选,若有.后面至少有一个）  @  任意字母数字 . 任意字母（2-5位） . 任意字母（2-5位）</span></span><br><span class=\"line\"><span class=\"comment\"> *       \\w                     (\\.\\w+)*                            @   [A-z0-9]      (\\.[A-z]&#123;2-5&#125;)&#123;1-2&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * 记得加上^与$</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">emailReg = <span class=\"regexp\">/^\\w&#123;3,&#125;(\\.\\w+)*@[A-z0-9]+(\\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> email = <span class=\"string\">\"165413@qq.com.cn\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(emailReg.test(email));</span><br></pre></td></tr></table></figure>\n<p><code>true</code></p>\n<p>OK~</p>\n<h6 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h6><p>菜鸟教程（<a href=\"https://www.runoob.com/）\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/）</a></p>\n<p>MDN Web Docs（<a href=\"https://developer.mozilla.org）\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org）</a></p>\n<p>等等</p>\n","more":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p><code>/正则表达式主体/修饰符(可选)</code></p>\n<h3 id=\"使用字符串方法\"><a href=\"#使用字符串方法\" class=\"headerlink\" title=\"使用字符串方法\"></a>使用字符串方法</h3><p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。</p>\n<h4 id=\"search-方法\"><a href=\"#search-方法\" class=\"headerlink\" title=\"search()方法\"></a>search()方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * search</span></span><br><span class=\"line\"><span class=\"comment\"> * 搜索字符串中是否含有指定内容,返回子串的起始位置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"hello abc aec aqc\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.search(<span class=\"regexp\">/a[beq]c/</span>));</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>6</code></p>\n<h4 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * replace 替换</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"string\">'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.replace(<span class=\"string\">\"fox\"</span>,<span class=\"string\">\"Monkey\"</span>));</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>The quick brown Monkey jumps over the lazy dog. If the dog reacted, was it really lazy?</code></p>\n<h4 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * split(): 切片，除去该参数,将分割后的字符串存储到数组中的String方法中</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> str = <span class=\"string\">\"1z3v3f4n5i6s\"</span>;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> result = str.split(<span class=\"regexp\">/[0-9]/</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>[&#39;&#39;, &#39;z&#39;, &#39;v&#39;, &#39;f&#39;, &#39;n&#39;, &#39;i&#39;, &#39;s&#39;]</code></p>\n<h4 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a>match()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * match: 可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配</span></span><br><span class=\"line\"><span class=\"comment\">    */</span> </span><br><span class=\"line\">   <span class=\"keyword\">var</span> str = <span class=\"string\">\"The rain in SPAIN stays mainly in the plain\"</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> n = str.match(<span class=\"regexp\">/ain/g</span>);</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>ain,ain,ain</code></p>\n<h3 id=\"使用-RegExp-对象\"><a href=\"#使用-RegExp-对象\" class=\"headerlink\" title=\"使用 RegExp 对象\"></a>使用 RegExp 对象</h3><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test()\"></a>test()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * test()：检测一个字符串是否匹配某个模式</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> patt1=<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"e\"</span>);</span><br><span class=\"line\">   <span class=\"built_in\">document</span>.write(patt1.test(<span class=\"string\">\"The best things in life are free\"</span>));</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>true</code></p>\n<h4 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec()\"></a>exec()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * exec() </span></span><br><span class=\"line\"><span class=\"comment\"> * 方法用于检索字符串中的正则表达式的匹配</span></span><br><span class=\"line\"><span class=\"comment\"> * 该函数返回一个数组，其中存放匹配的结果,如果未找到匹配，则返回值为 null。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> patt1=<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"e\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(patt1.exec(<span class=\"string\">\"The best things in life are free\"</span>));</span><br></pre></td></tr></table></figure>\n<p>结果：<br><code>e</code></p>\n<h2 id=\"正则表达式修饰符\"><a href=\"#正则表达式修饰符\" class=\"headerlink\" title=\"正则表达式修饰符\"></a>正则表达式修饰符</h2><ul>\n<li>i : 执行对大小写不敏感的匹配。</li>\n<li>g : 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</li>\n<li>m : 执行多行匹配</li>\n</ul>\n<h2 id=\"正则表达式模式\"><a href=\"#正则表达式模式\" class=\"headerlink\" title=\"正则表达式模式\"></a>正则表达式模式</h2><h3 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h3><ul>\n<li>[abc] : 查找方括号之间的任何字符</li>\n<li>[0-9] : 查找任何从 0 至 9 的数字</li>\n<li>(x|y) : 查找任何以 | 分隔的选项</li>\n</ul>\n<h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><ul>\n<li>\\d : 查找数字</li>\n<li>\\s : 查找空白字符</li>\n<li>\\b : 匹配单词边界</li>\n<li>\\uxxxx : 查找以十六进制数 xxxx 规定的 Unicode 字符</li>\n<li>^ : 表示开头</li>\n<li>$ : 表示结尾</li>\n</ul>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><p><strong>量词只对前一个内容起作用</strong></p>\n<ul>\n<li>n+ : 匹配任何包含至少一个 n 的字符串</li>\n<li>n* : 匹配任何包含零个或多个 n 的字符串</li>\n<li>n? : 匹配任何包含零个或一个 n 的字符串</li>\n<li>‘+’ : 至少一个</li>\n<li>‘-’ : 0个</li>\n<li>{n} ：正好出现n次</li>\n<li>{m,n} ：出现m-n次</li>\n<li>{m, } : m次以上</li>\n</ul>\n<h4 id=\"小练习\"><a href=\"#小练习\" class=\"headerlink\" title=\"小练习\"></a>小练习</h4><p>去除以下字符串开头与结尾空格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"        he         llo       \"</span>;</span><br><span class=\"line\">str = str.replace(<span class=\"regexp\">/^\\s*|\\s*$/g</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n<p><code>he         llo</code></p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li>测试输入数字是否为手机号码<br>思路：</li>\n</ul>\n<ol>\n<li>手机号共11位</li>\n<li>第一位为1 ：^1</li>\n<li>第二位为3-9的数字 : [3-9]</li>\n<li>第三位以后为0-9的9位数字： [0-9]{9}$<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意^与$的使用</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> phone = <span class=\"string\">\"13553597193\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> phoneReg = <span class=\"regexp\">/^1[3-9][0-9]&#123;9&#125;$/</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(phoneReg.test(phone));</span><br></pre></td></tr></table></figure>\n<code>true</code></li>\n</ol>\n<ul>\n<li>测试邮箱账号是否符合规则</li>\n</ul>\n<p>思路看注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 任意字母数字下划线   .任意字符数字下划线（可选,若有.后面至少有一个）  @  任意字母数字 . 任意字母（2-5位） . 任意字母（2-5位）</span></span><br><span class=\"line\"><span class=\"comment\"> *       \\w                     (\\.\\w+)*                            @   [A-z0-9]      (\\.[A-z]&#123;2-5&#125;)&#123;1-2&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * 记得加上^与$</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">emailReg = <span class=\"regexp\">/^\\w&#123;3,&#125;(\\.\\w+)*@[A-z0-9]+(\\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> email = <span class=\"string\">\"165413@qq.com.cn\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(emailReg.test(email));</span><br></pre></td></tr></table></figure>\n<p><code>true</code></p>\n<p>OK~</p>\n<h6 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h6><p>菜鸟教程（<a href=\"https://www.runoob.com/）\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/）</a></p>\n<p>MDN Web Docs（<a href=\"https://developer.mozilla.org）\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org）</a></p>\n<p>等等</p>","categories":[],"tags":[{"name":"正则","path":"api/tags/正则.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}